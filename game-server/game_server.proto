syntax = "proto3";

package gameserver;

option go_package = ".;gameserver";

service Route {
  rpc VerifyCompatibility (VerifyCompatibilityPayload) returns (VerifyCompatibilityResponse) {}
  rpc Login (LoginPayload) returns (LoginResponse) {}
  rpc POL (POLPayload) returns (POLResponse) {}
  rpc CheckMatchCanStart (CheckMatchCanStartPayload) returns (CheckMatchCanStartResponse) {}
  rpc ServeBoard (ServeBoardPayload) returns (ServeBoardResponse) {}
  rpc Play (PlayPayload) returns (PlayResponse) {}
  rpc CheckBoardUpdated (CheckBoardUpdatedPayload) returns (CheckBoardUpdatedResponse) {}
}

message VerifyCompatibilityPayload {
  string gameClientVersion = 1;
}

message VerifyCompatibilityResponse {
  string gameServerVersion = 1;
}

message LoginPayload {
}

message LoginResponse {
  string sessionToken = 1;
}

message POLPayload {
  string sessionToken = 1;
}

message POLResponse {
  string matchStatus = 1;
}

message CheckMatchCanStartPayload {
  string sessionToken = 1;
}

message CheckMatchCanStartResponse {
  bool canStart = 1;
}

message ServeBoardPayload {
  string sessionToken = 1;
}

message ServeBoardResponse {
  string board = 1;
  string playerID = 2;
}

message PlayPayload {
  string sessionToken = 1;
  int32 column = 2;
}

message PlayResponse {
  bool thereIsWinner = 1;
  string error = 2;
}

message CheckBoardUpdatedPayload {
  string sessionToken = 1;
}

message CheckBoardUpdatedResponse {
  string feedback = 1;
}
